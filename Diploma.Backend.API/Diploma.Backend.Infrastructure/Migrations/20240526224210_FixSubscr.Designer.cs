// <auto-generated />
using System;
using Diploma.Backend.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Diploma.Backend.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240526224210_FixSubscr")]
    partial class FixSubscr
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.CountryInTargeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("TargetingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("TargetingId");

                    b.ToTable("CountryInTargeting", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.OptionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Language");

                    b.Property<string>("OptionLine")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("OptionLine");

                    b.Property<int>("QuestionOptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionOptionId");

                    b.ToTable("OptionTranslation", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int")
                        .HasColumnName("OrderNumber");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.QuestionLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionLine", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int")
                        .HasColumnName("OrderNumber");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOption", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.QuestionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionLineId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionTranslationLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionLineId");

                    b.ToTable("QuestionTranslation");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateChangeStatus")
                        .HasColumnType("datetime")
                        .HasColumnName("DateChangeStatus");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime")
                        .HasColumnName("DateCreate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SubscriptionId");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Subscription", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateBy")
                        .HasColumnType("datetime")
                        .HasColumnName("DateBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Params");

                    b.Property<int>("TargetingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TargetingId");

                    b.HasIndex("UserId");

                    b.ToTable("Survey", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.SurveyInUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("SurveyUnitId");

                    b.ToTable("SurveyInUnit", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.SurveyUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppearanceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppearanceId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyUnit", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Targeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Targeting", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DefaultParams")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DefaultParams");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("TemplateCode")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TemplateCode");

                    b.HasKey("Id");

                    b.ToTable("Template", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.UnitAppearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Params");

                    b.Property<bool>("State")
                        .HasColumnType("bit")
                        .HasColumnName("State");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Type");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("UnitAppearance", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.UnitSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("HideAfterNoSurveys")
                        .HasColumnType("bit")
                        .HasColumnName("HideAfterNoSurveys");

                    b.Property<int>("MaximumSurveysPerDevice")
                        .HasColumnType("int")
                        .HasColumnName("MaximumSurveysPerDevice");

                    b.Property<bool>("MessageAfterNoSurveys")
                        .HasColumnType("bit")
                        .HasColumnName("MessageAfterNoSurveys");

                    b.Property<int>("OneSurveyTakePerDevice")
                        .HasColumnType("int")
                        .HasColumnName("OneSurveyTakePerDevice");

                    b.Property<int>("SurveyUnitId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyUnitId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UnitSettings", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Role");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.CountryInTargeting", b =>
                {
                    b.HasOne("Diploma.Backend.Domain.Models.Country", "Country")
                        .WithMany("CountryInTargetings")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diploma.Backend.Domain.Models.Targeting", "Targeting")
                        .WithMany("CountryInTargetings")
                        .HasForeignKey("TargetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Targeting");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.OptionTranslation", b =>
                {
                    b.HasOne("Diploma.Backend.Domain.Models.QuestionOption", "QuestionOption")
                        .WithMany("OptionTranslations")
                        .HasForeignKey("QuestionOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionOption");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Question", b =>
                {
                    b.HasOne("Diploma.Backend.Domain.Models.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.QuestionLine", b =>
                {
                    b.HasOne("Diploma.Backend.Domain.Models.Question", "Question")
                        .WithOne("QuestionLine")
                        .HasForeignKey("Diploma.Backend.Domain.Models.QuestionLine", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.QuestionOption", b =>
                {
                    b.HasOne("Diploma.Backend.Domain.Models.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.QuestionTranslation", b =>
                {
                    b.HasOne("Diploma.Backend.Domain.Models.QuestionLine", "QuestionLine")
                        .WithMany("QuestionTranslations")
                        .HasForeignKey("QuestionLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionLine");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Subscription", b =>
                {
                    b.HasOne("Diploma.Backend.Domain.Models.User", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("Diploma.Backend.Domain.Models.Subscription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Survey", b =>
                {
                    b.HasOne("Diploma.Backend.Domain.Models.Targeting", "Targeting")
                        .WithMany("Surveys")
                        .HasForeignKey("TargetingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Diploma.Backend.Domain.Models.User", "User")
                        .WithMany("Surveys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Targeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.SurveyInUnit", b =>
                {
                    b.HasOne("Diploma.Backend.Domain.Models.Survey", "Survey")
                        .WithMany("SurveyInUnits")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diploma.Backend.Domain.Models.SurveyUnit", "SurveyUnit")
                        .WithMany("SurveyInUnits")
                        .HasForeignKey("SurveyUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("SurveyUnit");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.SurveyUnit", b =>
                {
                    b.HasOne("Diploma.Backend.Domain.Models.UnitAppearance", "UnitAppearance")
                        .WithMany("SurveyUnits")
                        .HasForeignKey("AppearanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diploma.Backend.Domain.Models.User", "User")
                        .WithMany("SurveyUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("UnitAppearance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Targeting", b =>
                {
                    b.HasOne("Diploma.Backend.Domain.Models.User", "User")
                        .WithMany("Targetings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.UnitAppearance", b =>
                {
                    b.HasOne("Diploma.Backend.Domain.Models.Template", "Template")
                        .WithMany("UnitAppearances")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diploma.Backend.Domain.Models.User", "User")
                        .WithMany("UnitAppearances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.UnitSettings", b =>
                {
                    b.HasOne("Diploma.Backend.Domain.Models.SurveyUnit", "SurveyUnit")
                        .WithOne("UnitSettings")
                        .HasForeignKey("Diploma.Backend.Domain.Models.UnitSettings", "SurveyUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diploma.Backend.Domain.Models.User", "User")
                        .WithMany("UnitSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SurveyUnit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Country", b =>
                {
                    b.Navigation("CountryInTargetings");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Question", b =>
                {
                    b.Navigation("QuestionLine")
                        .IsRequired();

                    b.Navigation("QuestionOptions");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.QuestionLine", b =>
                {
                    b.Navigation("QuestionTranslations");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.QuestionOption", b =>
                {
                    b.Navigation("OptionTranslations");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Survey", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("SurveyInUnits");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.SurveyUnit", b =>
                {
                    b.Navigation("SurveyInUnits");

                    b.Navigation("UnitSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Targeting", b =>
                {
                    b.Navigation("CountryInTargetings");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.Template", b =>
                {
                    b.Navigation("UnitAppearances");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.UnitAppearance", b =>
                {
                    b.Navigation("SurveyUnits");
                });

            modelBuilder.Entity("Diploma.Backend.Domain.Models.User", b =>
                {
                    b.Navigation("Subscription")
                        .IsRequired();

                    b.Navigation("SurveyUnits");

                    b.Navigation("Surveys");

                    b.Navigation("Targetings");

                    b.Navigation("UnitAppearances");

                    b.Navigation("UnitSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
